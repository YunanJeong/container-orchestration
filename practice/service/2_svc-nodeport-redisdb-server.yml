# Service 예제 - NodePort
# 대상 Pod(0_deploy_server-client-example.yml)를 미리 켜두고, 
  
# 정상동작 테스트 방법
# 대상 Pod(0_deploy_server-client-example.yml)를 미리 켜둔다.
# 로컬호스트(클러스터 외부)에서 nodeIP,nodePort로접근되는지 확인 (minikube의 경우 minikube ip가 nodeIP다)
  # telnet {node IP} {nodePort}
  # dbsize, GET count 등 명령어를 전송해서 결과가 얻어지는지 확인해보자



apiVersion: v1
kind: Service
metadata:
  name: svc-nodeport
spec:
  type: NodePort
  # 포트 정보
  # Nodeport->Port(Service)->TargetPort(Pod)로 이어지는 포트포워딩이 수행된다.
  # NodeIP, ServiceIP(ClusterIP), PodIP 모두 클러스터 내에서 접근가능한데 왜 이렇게 계층화되어 있는가?
  # => 관리 효율화 및 주목적의 차이
  # => NodeIP 및 nodePort: 클러스터 외부에서 오는 request를 받을 인터페이스 역할이 주용도
  # => Pod은 재실행이 잦아서 IP 및 name도 자주 변경되기 때문에 직접사용 X
  # => 클러스터 내부의 대부분 통신은 주로 Service의 ClusterIP와 port를 이용
  
  ports:
    - protocol: TCP
      nodePort: 31000  # Node(host)에서 open할 port         # default: 30000-32768 
      port: 3333       # Service에서 open할 port
      targetPort: 6379 # 대상 Pod(container)에 open된 port  # default: 위 port와 동일
      

  # Service에 연동될 대상 Pod 지정 (0_deploy_server-client-example.yml)
  selector:
    app: sampleapp
    tier: db
