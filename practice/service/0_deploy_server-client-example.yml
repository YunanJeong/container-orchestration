# redis (db server) pod을 deploy한다
apiVersion: apps/v1
kind: Deployment
metadata:
  name: deploy-metadata-redis
spec:
  selector:    # selector: label기반으로 다른 오브젝트를 식별하고 제어한다.
    matchLabels:
      app: sampleapp
      tier: db
  template:    # template: pod의 구성 및 메타데이터
    metadata:
      labels:
        app: sampleapp
        tier: db
    spec:
      containers:
        - name: container-redisdb
          image: redis
          ports:
            - containerPort: 6379
              protocol: TCP


---


# redis (db server)에 접속할 Client App역할 Pod
# kubectl exec -it {podname} -- telnet {servicename or   serviceip} {service port} 로 redis에 정상접근되는지 확인해보자
apiVersion: apps/v1
kind: Deployment
metadata:
  name: deploy-metadata-client
spec:
  selector:
    matchLabels:
      app: sampleapp
      tier: client
  template:
    metadata:
      labels:
        app: sampleapp
        tier: client
    spec:
      containers:
        - name: container-client
          image: ghcr.io/subicura/counter:latest
          env:
            # 컨테이너 내부의 Client App이 redis에 자동 연결하기 위한 환경변수를 기술한다. (여기적힌 IP,Port는 별도 telnet으로 연결테스트할 때는 무관)
            # 여기서 redis Pod의 IP와 Port를 기술해도 연결은 되지만,
            # Pod은 계속해서 IP가 변할 수 있기 때문에 Service를 활용하는 것이 적합하다.
            - name: REDIS_HOST
              value: "service-metadata-redis" # Service IP 또는 Service Name을 이용할 수 있다.
            - name: REDIS_PORT
              value: "3333"                   # Service Port